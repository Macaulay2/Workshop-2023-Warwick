-- undocumented methods and symbols (for each, consider... does it really need to be exported? should it be documented?)
undocumented {
    }

Subring.synonym = "subring"
SAGBIBasis.synonym = "SAGBIBasis"
IntersectedSubring.synonym = "intersected subring"
-- ##################################
-- ##  sagbi-main.m2 documentation ##
-- ##################################
doc ///
  Key
    SubalgebraBases
  Headline
    A package for finding canonical subalgebra bases (Sagbi bases)
  Description
    Text
      Let $R=k[f_1,\ldots,f_k]$ denote the subalgebra of the polynomial quotient ring $k[x_1,\ldots,x_n] / I$ generated by $f_1, \ldots, f_k$. We say
      $f_1, \ldots, f_k$ form a {\it subalgebra basis} with respect to a monomial order $<$ if the {\it initial algebra}
      associated to $<$, defined as $in(R) := k[in(f) \mid f \in R] \subseteq k[x_1, \ldots, x_n] / in(I)$, is generated by the elements
      $in(f_1), \ldots , in(f_k)$.
      The main functions provided by this package are for computing these subalgebra bases: @TO sagbi @, @TO subalgebraBasis@, and @TO isSAGBI @.
    Text
       {\bf Some references for Subalgebra bases (aka canonical subalgebra bases, SAGBI bases)}

      @UL {
      "Kapur, D., Madlener, K. (1989). A completion procedure for computing a canonical basis of a $k$-subalgebra.
      Proceedings of Computers and Mathematics 89 (eds. Kaltofen and Watt), MIT, Cambridge, June 1989",
      "Robbiano, L., Sweedler, M. (1990). Subalgebra bases,
      in W.~Bruns, A.~Simis (eds.): Commutative Algebra,
      Springer Lecture Notes in Mathematics 1430, pp.~61--87",
      "F. Ollivier, Canonical Bases: Relations with Standard bases, finiteness
      conditions and applications to tame automorphisms, in Effective Methods
      in Algebraic Geometry, Castiglioncello 1990, pp. 379-400,
      Progress in Math. 94 Birkhauser, Boston (1991)",
      "Stillman, Michael, and Harrison Tsai. Using SAGBI bases to compute invariants. J. Pure and Appl. Alg., 1999, pp.~285--302.",
      "B. Sturmfels, Groebner bases and Convex Polytopes, Univ. Lecture
      Series 8, Amer Math Soc, Providence, 1996"
      }@
  SeeAlso
    "Example: Translation and rotation sub-actions of the adjoint action of SE(3)"
///
doc ///
   Key
      subalgebraBasis
     (subalgebraBasis, Subring)
     (subalgebraBasis, Matrix)
     (subalgebraBasis, List)
     [subalgebraBasis,AutoSubduce]
     [subalgebraBasis,ReduceNewGenerators]
     [subalgebraBasis,StorePending]
     [subalgebraBasis,Strategy]
     [subalgebraBasis,SubductionMethod]
     [subalgebraBasis,Limit]
     [subalgebraBasis,AutoSubduceOnPartialCompletion]
     [subalgebraBasis,PrintLevel]
     [subalgebraBasis,Recompute]
     [subalgebraBasis,RenewOptions]
   Headline
     Compute subalgebra basis (sagbi basis) generators
   Usage
     N = subalgebraBasis M
     N = subalgebraBasis A
     N = subalgebraBasis L
     N = subalgebraBasis B
   Inputs
     A:Subring
     M:Matrix
       of generators for @ ofClass Subring @ of @ ofClass{PolynomialRing} @
     L:List
       containing generators for @ ofClass Subring @ of @ ofClass{PolynomialRing} @
     B:SAGBIBasis
        containing a partial computation of a sagbi basis
     AutoSubduce=>Boolean
       a flag indicating when to perform autosubduction on the generators before performing the Sagbi basis computation (See: @TO "AutoSubduce"@)
     ReduceNewGenerators=>Boolean
       a flag indicating whether to apply gaussian elimination to new sagbi generators before adding them to the current sagbi basis (See: @TO "ReduceNewGenerators"@)
     StorePending=>Boolean
       a flag that indicates whether the {\it pending list} should be stored in the result. (See: @TO "StorePending"@)
     Strategy=>String
       the update strategy at the beginning of each loop: \"DegreeByDegree\", \"Incremental\", and \"Master\".
       The strategy \"Master\" is a hybrid that combines the other two; starting with \"DegreeByDegree\" for low degrees and switching to \"Incremental\". (See: @TO "Strategy"@)
     SubductionMethod=>String
       the method used for subduction either: \"Top\" or \"Engine\". (See: @TO "SubductionMethod"@)
     Limit=>ZZ
       a degree limit for the binomial S-pairs that are computed internally.
     AutoSubduceOnPartialCompletion=>Boolean
       apply autosubduction to the sagbi generators the first time no new generators are added.
       Use this only if very few new sagbi generators are expected. (See: @TO "AutoSubduceOnPartialCompletion"@)
     PrintLevel=>ZZ
       When this is greater than zero, information is printed about the progress of the computation (See: @TO "PrintLevel"@)
     Recompute=>Boolean
       if @ TT "true" @ then the computation will resume otherwise it starts at the beginning
     RenewOptions=>Boolean
       if @ TT "true" @ then the computation will use the options specified otherwise it will use the previously selected options
       (except for the following, which may always be specified: @TO "PrintLevel"@, @TO "Limit"@, @TO "Recompute"@, and @TO "RenewOptions"@)
   Outputs
     N:Matrix
       whose entries form a partial subalgebra basis
   Description
     Text
       The command @TO "subalgebraBasis"@ @TT "A"@ is equivalent to the command @TO gens@ @TO "sagbi"@ @TT "A"@.
   SeeAlso
     sagbi
     AutoSubduce
     ReduceNewGenerators
     StorePending
     Strategy
     SubductionMethod
     Limit
     AutoSubduceOnPartialCompletion
     PrintLevel
     Recompute
     RenewOptions
///
doc ///
   Key
      sagbi
     (sagbi,Subring)
     (sagbi, Matrix)
     (sagbi, List)
     (sagbi,SAGBIBasis)
     [sagbi,AutoSubduce]
     [sagbi,ReduceNewGenerators]
     [sagbi,StorePending]
     [sagbi,Strategy]
     [sagbi,SubductionMethod]
     [sagbi,Limit]
     [sagbi,AutoSubduceOnPartialCompletion]
     [sagbi,PrintLevel]
     [sagbi,Recompute]
     [sagbi,RenewOptions]
   Headline
     Compute a subalgebra basis (sagbi basis)
   Usage
     N = sagbi M
     N = sagbi A
     N = sagbi L
     N = sagbi B
   Inputs
     A:Subring
     M:Matrix
       of generators for @ ofClass Subring @ of @ ofClass{PolynomialRing} @
     L:List
       containing generators for @ ofClass Subring @ of @ ofClass{PolynomialRing} @
     B:SAGBIBasis
        containing a partial computation of a sagbi basis
     AutoSubduce=>Boolean
       a flag indicating when to perform autosubduction on the generators before performing the sagbi basis computation (See: @TO "AutoSubduce"@)
     ReduceNewGenerators=>Boolean
       a flag indicating whether to apply gaussian elimination to new sagbi generators before adding them to the current sagbi basis (See: @TO "ReduceNewGenerators"@)
     StorePending=>Boolean
       a flag that indicates whether the {\it pending list} should be stored in the result. (See: @TO "StorePending"@)
     Strategy=>String
       the update strategy at the beginning of each loop: \"DegreeByDegree\", \"Incremental\", and \"Master\".
       The strategy \"Master\" is a hybrid that combines the other two; starting with \"DegreeByDegree\" for low degrees and switching to \"Incremental\". (See: @TO "Strategy"@)
     SubductionMethod=>String
       the method used for subduction either: \"Top\" or \"Engine\". (See: @TO "SubductionMethod"@)
     Limit=>ZZ
       a degree limit for the binomial S-pairs that are computed internally.
     AutoSubduceOnPartialCompletion=>Boolean
       apply autosubduction to the sagbi generators the first time no new generators are added.
       Use this only if very few new sagbi generators are expected. (See: @TO "AutoSubduceOnPartialCompletion"@)
     PrintLevel=>ZZ
       When this is greater than zero, information is printed about the progress of the computation (See: @TO "PrintLevel"@)
     Recompute=>Boolean
       if @ TT "true" @ then the computation will resume otherwise it starts at the beginning
     RenewOptions=>Boolean
       if @ TT "true" @ then the computation will use the options specified otherwise it will use the previously selected options
       (except for the following, which may always be specified: @TO "PrintLevel"@, @TO "Limit"@, @TO "Recompute"@, and @TO "RenewOptions"@)
   Outputs
     N:SAGBIBasis
       a computation object holding the state of the sagbi basis computation
   Description
    Text
        The output of this function is a partial subalgebra basis stored in a computation object.
    Example
    	R = QQ[t_(1,1)..t_(3,3),MonomialOrder=>Lex];
	M = genericMatrix(R,3,3);
    	A = subring gens minors(2, M);
        isSAGBI A
	S = sagbi A;
    	gS = gens S
	isSAGBI gS
    Text
        Partial subalgebra bases are unavoidable since a subalgebra of a polynomial ring, endowed with some polynomial order, need not have a finite subalgebra basis.  Here is a quintessential example of this phenomenon:
    Example
      R=QQ[x,y];
      A = subring matrix{{x+y,x*y,x*y^2}};
      gens sagbi(A,Limit=>3)
      gens sagbi(A,Limit=>10)
    Text
        Nevertheless, a finite subalgebra basis can be computed in many cases.

   SeeAlso
     subalgebraBasis
     AutoSubduce
     ReduceNewGenerators
     StorePending
     Strategy
     SubductionMethod
     Limit
     AutoSubduceOnPartialCompletion
     PrintLevel
     Recompute
     RenewOptions
///
doc ///
   Key
     AutoSubduce
   Headline
     Flag for autosubduction before the Sagbi algorithm
   Description
     Text
       An {\it autosubduction} is when a collection of ring elements (usually a set of generators or subalgebra generators) are
       subducted against each other, one at a time. The result of each subduction replaces the original element that was subducted.
       If any element subducts to zero, then it is removed from the collection.
        
       By default, the function @TO "sagbi"@ performs autosubduction on the generators of the given @ TO Subring @
       before starting the main algorithm. This step is required to guarantee correctness of the result.
       However, the output of the @TO "sagbi"@ algorithm is often correct even when this step is skipped.
       Setting this flag to @TT "false"@ may result in a performance improvement, albeit with a risk of errors.
   SeeAlso
     sagbi
     AutoSubduce
     ReduceNewGenerators
     StorePending
     Strategy
     SubductionMethod
     Limit
     AutoSubduceOnPartialCompletion
     PrintLevel
     Recompute
     RenewOptions
///
doc ///
   Key
     ReduceNewGenerators
   Headline
     Flag for reducing new generators in Sagbi algorithm
   Description
     Text
       The function @TO "sagbi"@ computes a subalgebra basis by subducting {\it S-pairs}.
       Any resulting non-zero polynomials are added to the list of sagbi generators.
       However if ReduceNewGenerators is set to @ TT "true" @ (by default) then the new generators are reduced using gaussian elimination against the other new generators.
       This process is quick (as fast as computing a groebner basis for a linear ideal) and ensures that duplicate generators are not added to the list of sagbi generators.
   SeeAlso
     sagbi
     AutoSubduce
     ReduceNewGenerators
     StorePending
     Strategy
     SubductionMethod
     Limit
     AutoSubduceOnPartialCompletion
     PrintLevel
     Recompute
     RenewOptions
///
doc ///
   Key
     StorePending
   Headline
     Flag for storing the pending list to the result of the Sagbi algorithm
   Description
     Text
       The function @TO "sagbi"@ produces @ ofClass SAGBIBasis @ computation object.
       If the @ TT "StorePending" @ flag is @ TT "true" @ then the output will contain a copy of the pending list.
       The pending list contains all {\it S-pairs} grouped by their degrees.
       If the sagbi algorithm terminates without producing a complete sagbi basis, for example due to @TO "Limit"@, then the computation may be resumed by calling @TO "sagbi"@ on the resulting computation object with new options.
       The resumed computation will use the pending list stored in the @TO "SAGBIBasis"@ computation object.
       If there is no pending list in the computation object then one will be created.
       Depending on the computation, the pending list may be very large and it may not be convenient to save all the data.
   SeeAlso
     sagbi
     AutoSubduce
     ReduceNewGenerators
     StorePending
     Strategy
     SubductionMethod
     Limit
     AutoSubduceOnPartialCompletion
     PrintLevel
     Recompute
     RenewOptions
///
doc ///
   Key
     Strategy
   Headline
     Update procedure for the Sagbi algorithm
   Description
     Text
       At the beginning of each loop inside of @TO "sagbi"@, the main @TO "SAGBIBasis"@ computation object is updated.
       There are two types of update procedure; they are selected by setting Strategy to either \"DegreeByDegree\" or \"Incremental\".
       The \"DegreeByDegree\" strategy computes a partial groebner basis of the {\it reduction ideal} from scratch.
       The \"Incremental\" strategy computes a full groebner basis of the {\it reduction ideal} by using the previous full groebner basis together with the data of the new sagbi generators.
       The \"DegreeByDegree\" strategy is better when many new generators are added during each loop of the Sagbi algorithm.
       The \"Incremental\" strategy is better when there is little change to the number of sagbi generators.
       For many examples, it is observed that many new generators are added at the beginning of sagbi basis computations.
       Then towards the end of the computation, there are very few new generators that are added.
       By setting Strategy to \"Master\" (default), the \"DegreeByDegree\" strategy is used at the beginning and the strategy switches to \"Incremental\" part of the way through the algorithm.
   SeeAlso
     sagbi
     AutoSubduce
     ReduceNewGenerators
     StorePending
     Strategy
     SubductionMethod
     Limit
     AutoSubduceOnPartialCompletion
     PrintLevel
     Recompute
     RenewOptions
///
doc ///
   Key
     SubductionMethod
   Headline
     Subduction method for the Sagbi algorithm
   Description
     Text
       To subduct the {\it S-pairs} in @TO "sagbi"@, one can either use \"Top\" or \"Engine\".
       Engine level subduction is generally faster.
       To view each subduction taking place inside the Sagbi algorithm, use a high value for @TO PrintLevel@ together with top-level subduction.
   SeeAlso
     sagbi
     AutoSubduce
     ReduceNewGenerators
     StorePending
     Strategy
     SubductionMethod
     Limit
     AutoSubduceOnPartialCompletion
     PrintLevel
     Recompute
     RenewOptions
///
doc ///
   Key
     Limit
   Headline
     Degree limit for the Sagbi algorithm
   Description
     Text
       The stopping criteria for the main loop in @TO "sagbi"@ are: a finite sagbi basis is computed, or the smallest degree of an {\it S-pair} exceeds the @TO Limit@.
       In general, the initial terms of generators of a partial computation do not generate the initial algebra up to the degree limit.
       It is possible that, with a higher degree limit, sagbi generators of lower degree will be added.
       One can guarantee that all sagbi generators up to a certain degree are found by using a graded term-order such as GRevLex and working with @ ofClass Subring @ of @ ofClass PolynomialRing @ (and not @ ofClass QuotientRing @).
   SeeAlso
     sagbi
     AutoSubduce
     ReduceNewGenerators
     StorePending
     Strategy
     SubductionMethod
     Limit
     AutoSubduceOnPartialCompletion
     PrintLevel
     Recompute
     RenewOptions
///
doc ///
   Key
     AutoSubduceOnPartialCompletion
   Headline
     Subduct sagbi generators at the end of the Sagbi algorithm
   Description
     Text
       During the main loop in @TO "sagbi"@ if no new sagbi generators are added and the @TO "AutoSubduceOnPartialCompletion"@ flag
       is @ TT "true" @ then all sagbi generators are subducted against each other.
       This a significant time investment, however if no new sagbi generators are to be added then the subduction of the sagbi
       generators will speed up the computation of the groebner basis of the {\it reduction ideal} and {\it S-pairs}.
   SeeAlso
     sagbi
     AutoSubduce
     ReduceNewGenerators
     StorePending
     Strategy
     SubductionMethod
     Limit
     AutoSubduceOnPartialCompletion
     PrintLevel
     Recompute
     RenewOptions
///
doc ///
   Key
     PrintLevel
   Headline
     Levels of information displayed during Sagbi algorithm
   Description
     Text
       PrintLevel 0: no output
       
       PrintLevel 1+: some basic information each loop (no polynomials): computation degree, number of S-pairs, number of new generators, termination conditions.
       
       PrintLevel 2+: basic polynomials: S-pairs and new sagbi generators
       
       PrintLevel 3+: extra polynomials: {\it reduction ideal} generators, {\it zeroGens}, current sagbi generators
       
       PrintLevel 4+: show the input and output of each subduction
       
       Higher levels exist but may be overly verbose. PrintLevel 5 shows the processPending data and PrintLevel 6 shows the intermediate steps for top-level subduction.
   SeeAlso
     sagbi
     AutoSubduce
     ReduceNewGenerators
     StorePending
     Strategy
     SubductionMethod
     Limit
     AutoSubduceOnPartialCompletion
     PrintLevel
     Recompute
     RenewOptions
///
doc ///
   Key
     Recompute
   Headline
     Flag for restarting a sagbi computation
   Description
     Text
       If the flag is set to @ TT "true" @, then the sagbi computation will start from scratch.
       This process constructs, from scratch, @ ofClass SAGBIBasis @ and uses the computation options
       from the previous computation.
   SeeAlso
     sagbi
     subalgebraBasis
     AutoSubduce
     ReduceNewGenerators
     StorePending
     Strategy
     SubductionMethod
     Limit
     AutoSubduceOnPartialCompletion
     PrintLevel
     RenewOptions
///
doc ///
   Key
     RenewOptions
   Headline
     Flag for reselecting the options for a sagbi computation
   Description
     Text
       When a sagbi computation is initialized (for the first time), the options of that computation
       are stored in the computation object. Whenever the computation is resumed,
       the same options will apply to the computation, with the exception of
       @TO "PrintLevel"@, @TO "Limit"@, @TO "Recompute"@, and @TO "RenewOptions"@.
       To change the other options in the computation, set this flag to @ TT "true" @.
       The new options will be used and stored in the computation object.
   SeeAlso
     sagbi
     AutoSubduce
     ReduceNewGenerators
     StorePending
     Strategy
     SubductionMethod
     Limit
     AutoSubduceOnPartialCompletion
     PrintLevel
     Recompute
///

doc ///
   Key
      subduction
     (subduction, SAGBIBasis, Matrix)
     (subduction, SAGBIBasis, RingElement)
     (subduction, Matrix, Matrix)
     (subduction, Matrix, RingElement)
     (subduction, Subring, Matrix)
     (subduction, Subring, RingElement)
     (subduction, List, List)
     (subduction, List, RingElement)
     [subduction,AutoSubduce]
     [subduction,ReduceNewGenerators]
     [subduction,StorePending]
     [subduction,Strategy]
     [subduction,SubductionMethod]
     [subduction,Limit]
     [subduction,AutoSubduceOnPartialCompletion]
     [subduction,PrintLevel]
     [subduction,Recompute]
     [subduction,RenewOptions]
   Headline
     Subduction of polynomials
   Usage
     N = subduction(SB, M)
     n = subduction(SB, m)
     N = subduction(S, M)
     n = subduction(S, m)
     N = subduction(F, M)
     n = subduction(F, m)
     nList = subduction(FList, mList)
     n = subduction(FList, m)
   Inputs
     SB:SAGBIBasis
       subduct with respect to the sagbi generators of $SB$
     S:Subring
       subduct with respect to the generators of $S$
     F:Matrix
       subduct with respect to the entries of $F$
     FList:List
       subduct with respect to the entries of $FList$
     M:Matrix
       a 1-row matrix whose entries are to be subducted
     m:RingElement
       the element to be subducted
     mList:List
       a list of elements to be subducted
     AutoSubduce=>Boolean
       a flag indicating when to perform autosubduction on the generators before performing the Sagbi basis computation (See: @TO "AutoSubduce"@)
     ReduceNewGenerators=>Boolean
       a flag indicating whether to apply gaussian elimination to new sagbi generators before adding them to the current sagbi basis (See: @TO "ReduceNewGenerators"@)
     StorePending=>Boolean
       a flag that indicates whether the {\it pending list} should be stored in the result. (See: @TO "StorePending"@)
     Strategy=>String
       the update strategy at the beginning of each loop: \"DegreeByDegree\", \"Incremental\", and \"Master\".
       The strategy \"Master\" is a hybrid that combines the other two; starting with \"DegreeByDegree\" for low degrees and switching to \"Incremental\". (See: @TO "Strategy"@)
     SubductionMethod=>String
       the method used for subduction either: \"Top\" or \"Engine\". (See: @TO "SubductionMethod"@)
     Limit=>ZZ
       a degree limit for the binomial S-pairs that are computed internally.
     AutoSubduceOnPartialCompletion=>Boolean
       apply autosubduction to the sagbi generators the first time no new generators are added.
       Use this only if very few new sagbi generators are expected. (See: @TO "AutoSubduceOnPartialCompletion"@)
     PrintLevel=>ZZ
       When this is greater than zero, information is printed about the progress of the computation (See: @TO "PrintLevel"@)
     Recompute=>Boolean
       if @ TT "true" @ then the computation will resume otherwise it starts at the beginning
     RenewOptions=>Boolean
       if @ TT "true" @ then the computation will use the options specified otherwise it will use the previously selected options
       (except for the following, which may always be specified: @TO "PrintLevel"@, @TO "Limit"@, @TO "Recompute"@, and @TO "RenewOptions"@)
   Outputs
     N:Matrix
       entries of $M$ after subduction
     n:RingElement
       the element $m$ after subduction
     nList:List
       the elements of $mList$ after subduction
   Description
     Text
       Performs subduction on the input with respect to the generating set of the supplied object.
       The subduction uses the specified @TO "SubductionMethod"@ and @TO "PrintLevel"@.
     Example
       R = QQ[x,y];
       S = subring {x+y, x*y, x*y^2};
       f = x^4;
       subduction(S, f)
   SeeAlso
     sagbi
     (symbol %, RingElement, Subring)
     AutoSubduce
     ReduceNewGenerators
     StorePending
     Strategy
     SubductionMethod
     Limit
     AutoSubduceOnPartialCompletion
     PrintLevel
     Recompute
     RenewOptions
///

-- #######################################
-- ##  sagbi-functions.m2 documentation ##
-- #######################################
doc ///
   Key
     isSAGBI
     (isSAGBI, Subring)
     (isSAGBI, SAGBIBasis)
     (isSAGBI, Matrix)
     (isSAGBI, List)
    [isSAGBI, Compute]
    [isSAGBI, Strategy]
    [isSAGBI, SubductionMethod]
    [isSAGBI, Limit]
    [isSAGBI, PrintLevel]
    [isSAGBI, Recompute]
    [isSAGBI, RenewOptions]
    [isSAGBI, UseSubringGens]
   Headline
     Check if the generators are a sagbi basis
   Usage
     result = isSAGBI S
     result = isSAGBI SB
     result = isSAGBI M
     result = isSAGBI L
   Inputs
     S:Subring
     SB:SAGBIBasis
     M:Matrix
     L:List
   Outputs
     result:Boolean
   Description
     Text
       This checks whether the generators of @ ofClass Subring @ or the sagbi generators of @ ofClass SAGBIBasis @ form a sagbi basis.
       After running @ TO "sagbi" @ on @ ofClass Subring @, the result of the computation is stored in the @ TT "cache" @ of that subring as @ ofClass SAGBIBasis @.
       If new sagbi generators need to be added to $S$ to make it a sagbi basis then @TT "isSAGBI"@ will return @ TT "false" @.
       If @TT "isSAGBI"@ is run on a ring for which no sagbi computation has been performed, then @TT "isSAGBI"@ will perform
       a test to see if the generators form a sagbi basis. This test can be skipped by setting @TO "Compute"@ to @ TT "false" @, and, in that
       case, @TT "isSAGBI"@ will return @ TT "null" @.
     Example
       R = QQ[x,y,z];
       S = subring {x+y+z,x*y+x*z+y*z, x*y*z, (x-y)*(x-z)*(y-z)};
       isSAGBI S
       sagbi(S, Limit => 5)
       isSAGBI S
       S' = subring {x+y+z,x*y+x*z+y*z, x*y*z};
       isSAGBI S'
       sagbi(S', Limit => 5)
       isSAGBI S'
     Text
       If @TT "isSAGBI"@ is supplied @ ofClass SAGBIBasis @ then the generators of the associated subring can be checked for being
       a sagbi basis by setting @TO "UseSubringGens"@ to @ TT "true" @.
       
       A note of caution. Excessive use of @TT "isSAGBI"@ may impact performance.
       The inputs and outputs of @TT "isSAGBI"@ are stored and never deleted. Since
       the inputs and outputs include pointers objects such as @TO "SAGBIBasis"@ computation objects, these
       objects will not be garbage collected.
   SeeAlso
     SAGBIBasis
     (gens, SAGBIBasis)
     (ambient, SAGBIBasis)
     (ring, SAGBIBasis)
     (net, SAGBIBasis)
     sagbi
///
doc ///
   Key
     Compute
   Headline
     Flag for performing computations while checking a sagbi basis
   Description
     Text
       A flag that determines whether computations should be performed for
       verifying the correctness of a sagbi basis. When the flag is set to
       @ TT "false" @ then the function being called will only use the results of
       previous computations, if they exist. When previous computations have
       not been performed and the flag is set to @ TT "false" @, then the function will
       usually return @ TT "null" @.
   SeeAlso
     isSAGBI
///
doc ///
   Key
     UseSubringGens
   Headline
     Flag for using the subring generators when checking a sagbi basis
   Description
     Text
       When @TO "isSAGBI"@ is supplied @ ofClass SAGBIBasis @ $SB$, then this flag determines
       whether the sagbi generators or the subring generators are checked for being a subalgebra basis.
       Explicitly, if the flag is set to @ TT "false" @ then the sagbi generators of $SB$ are checked for being
       a subalgebra basis. Otherwise, if the flag is set to @ TT "true" @ then the generators of the underlying
       subring associated to $SB$ are checked for being a subalgebra basis.
   SeeAlso
     isSAGBI

///
doc ///
   Key
     groebnerMembershipTest
     (groebnerMembershipTest, RingElement, Subring)
   Headline
     Extrinsic method for subring membership
   Usage
     result = groebnerMembershipTest(f, S)
   Inputs
     f:RingElement
     S:Subring
   Outputs
     result:Boolean
       @TT "f"@ belongs to @TT "S"@.
   Description
     Text
       Uses the extrinsic method to test membership of a polynomial in a subring.
       Note that @TT "S"@ must be a subring of a polynomial ring.
     Example
       R = QQ[x,y];
       S = subring {x^2 - x*y, x^4};
       f1 = x^2*y^2 - 2*x^3*y;
       groebnerMembershipTest(f1, S)
       f2 = x^10;
       groebnerMembershipTest(f2, S)
     Text
       If a sagbi basis is known for @TT "S"@ then it is recommended to use @TO "RingElement % Subring"@.
   SeeAlso
     Subring
     (symbol %, RingElement, Subring)
     groebnerSubductionQuotient
     (symbol //, RingElement, Subring)
     sagbi
///
doc ///
   Key
     groebnerSubductionQuotient
    (groebnerSubductionQuotient, RingElement, Subring)
   Headline
     Extrinsic method for subduction quotients
   Usage
     result = groebnerSubductionQuotient(f, S)
   Inputs
     f:RingElement
     S:Subring
   Outputs
     result:RingElement
   Description
     Text
       Uses the extrinsic method to compute a subduction quotient of $f$ by the
       generators of $S$. A subduction quotient is an element of the @TT "subductionQuotientRing"@.
       The variables of this ring correspond to the generators of $S$. A subduction
       quotient is a polynomial representation of $f - f\%S$ in terms of the generators of $S$.
     Example
       R = QQ[x,y];
       S = subring {x+y, x*y, x*y^2};
       f = x^3;
       f - (f%S)
       h = groebnerSubductionQuotient(f, S)
   SeeAlso
     Subring
     (symbol %, RingElement, Subring)
     (symbol //, RingElement, Subring)
     sagbi
///
doc ///
   Key
     (symbol //, RingElement, Subring)
   Headline
     subductionQuotient with respect to a subring
   Usage
     r = f // S
   Inputs
     f:RingElement
     S:Subring
   Outputs
     r:RingElement
       a subductionQuotient of f with respect to the subring
   Description
     Text
       The result is a ring element that lies in the @TT "subductionQuotientRing"@ that has one variable for
       generator of the subring $S$. A subduction quotient can be thought of as an expression of $f - (f\%S) \in S$
       in terms of the generators of $S$. This function is equivalent to @TO "groebnerSubductionQuotient"@.
   SeeAlso
     groebnerSubductionQuotient
     (symbol %, RingElement, Subring)
     (symbol %, Matrix, Subring)
     (symbol %, RingElement, SAGBIBasis)
     (symbol %, Matrix, SAGBIBasis)
     Subring
     SAGBIBasis
     groebnerMembershipTest
///
doc ///
   Key
     (symbol %, RingElement, Subring)
     --(symbol %, Matrix, Subring)
     --(symbol %, RingElement, SAGBIBasis)
     --(symbol %, Matrix, SAGBIBasis)
   Headline
     Remainder modulo a subring
   Usage
     r = f % S
     --R = M % S
     --r = f % SB
     --R = M % SB
   Inputs
     f:RingElement
     --M:Matrix
     S:Subring
     --SB:SAGBIBasis
   Outputs
     r:RingElement
       the normal form of f modulo the subring
     --R:Matrix
     --  the normal form of entries of M modulo the subring
   Description
     Text
       The result is zero if and only if the input belongs to the subring.
       If a sagbi basis is known for the subring then subduction is used to compute the normal forms.
       If no sagbi basis is known then an extrinsic method is used, similar to @TT "groebnerMembershipTest"@.
     Example
       R = QQ[x1, x2, x3];
       S = subring {x1+x2+x3, x1*x2+x1*x3+x2*x3, x1*x2*x3, (x1-x2)*(x1-x3)*(x2-x3)} --usual invariants of A_3
       f = x1 + x2 + 2*x3
       f % S
       g = x1^2*x2 + x2^2*x3 + x3^2*x1
       g % S
   SeeAlso
     (symbol %, RingElement, Subring)
     (symbol %, Matrix, Subring)
     (symbol %, RingElement, SAGBIBasis)
     (symbol %, Matrix, SAGBIBasis)
     Subring
     SAGBIBasis
     groebnerMembershipTest
///
doc ///
   Key
     --(symbol %, RingElement, Subring)
     (symbol %, Matrix, Subring)
     --(symbol %, RingElement, SAGBIBasis)
     --(symbol %, Matrix, SAGBIBasis)
   Headline
     Remainder modulo a subring
   Usage
     --r = f % S
     R = M % S
     --r = f % SB
     --R = M % SB
   Inputs
     --f:RingElement
     M:Matrix
     S:Subring
     --SB:SAGBIBasis
   Outputs
     --r:RingElement
     --  the normal form of f modulo the subring
     R:Matrix
       the normal form of entries of M modulo the subring
   Description
     Text
       Applies @TO "RingElement % Subring"@ entry-wise to @TT "M"@.
   SeeAlso
     (symbol %, RingElement, Subring)
     (symbol %, Matrix, Subring)
     (symbol %, RingElement, SAGBIBasis)
     (symbol %, Matrix, SAGBIBasis)
     Subring
     SAGBIBasis
     groebnerMembershipTest
///
doc ///
   Key
     --(symbol %, RingElement, Subring)
     --(symbol %, Matrix, Subring)
     (symbol %, RingElement, SAGBIBasis)
     --(symbol %, Matrix, SAGBIBasis)
   Headline
     Remainder modulo a subring
   Usage
     --r = f % S
     --R = M % S
     r = f % SB
     --R = M % SB
   Inputs
     f:RingElement
     --M:Matrix
     --S:Subring
     SB:SAGBIBasis
   Outputs
     r:RingElement
       the normal form of f modulo the subring
     --R:Matrix
     --  the normal form of entries of M modulo the subring
   Description
     Text
       Subducts @TT "f"@ against the sagbi generators of @TT "SB"@.
   SeeAlso
     (symbol %, RingElement, Subring)
     (symbol %, Matrix, Subring)
     (symbol %, RingElement, SAGBIBasis)
     (symbol %, Matrix, SAGBIBasis)
     Subring
     SAGBIBasis
     groebnerMembershipTest
///
doc ///
   Key
     --(symbol %, RingElement, Subring)
     --(symbol %, Matrix, Subring)
     --(symbol %, RingElement, SAGBIBasis)
     (symbol %, Matrix, SAGBIBasis)
   Headline
     Remainder modulo a subring
   Usage
     --r = f % S
     --R = M % S
     --r = f % SB
     R = M % SB
   Inputs
     --f:RingElement
     M:Matrix
     --S:Subring
     SB:SAGBIBasis
   Outputs
     --r:RingElement
     --  the normal form of f modulo the subring
     R:Matrix
       the normal form of entries of M modulo the subring
   Description
     Text
       Subducts @TT "M"@ entry-wise against the sagbi generators of @TT "SB"@.
   SeeAlso
     (symbol %, RingElement, Subring)
     (symbol %, Matrix, Subring)
     (symbol %, RingElement, SAGBIBasis)
     (symbol %, Matrix, SAGBIBasis)
     Subring
     SAGBIBasis
     groebnerMembershipTest
///
doc ///
   Key
      subringIntersection
     (subringIntersection, Subring, Subring)
     [subringIntersection, Strategy]
     [subringIntersection, SubductionMethod]
     [subringIntersection, Limit]
     [subringIntersection, PrintLevel]
   Headline
     Intersection of subrings
   Usage
     result = subringIntersection(S1, S2)
   Inputs
     S1:Subring
     S2:Subring
     Strategy=>String
       the update strategy at the beginning of each loop: \"DegreeByDegree\", \"Incremental\", and \"Master\".
       The strategy \"Master\" is a hybrid that combines the other two; starting with \"DegreeByDegree\" for low degrees and switching to \"Incremental\". (See: @TO "Strategy"@)
     SubductionMethod=>String
       the method used for subduction either: \"Top\" or \"Engine\". (See: @TO "SubductionMethod"@)
     "SAGBILimitType"=>String
       Either \"Fixed\" or \"Function\". Determines the stopping criterion for the sagbi computation. If \"Fixed\" then the @TO "Limit"@ is used,
       otherwise if \"Function\" is selected then the maximum degree of the input generators is used as the degree limit.
     Limit=>ZZ
       a degree limit for the binomial S-pairs that are computed internally.
     PrintLevel=>ZZ
       When this is greater than zero, information is printed about the progress of the computation (See: @TO "PrintLevel"@).
   Outputs
     result:IntersectedSubring
   Description
     Text
       Computes the intersection of subrings "S_1" and "S_2". These subrings must be subrings of the same
       ambient ring. The ambient ring is allowed to be a polynomial ring or the quotient of a polynomial ring.
     Example
       R = QQ[x,y];
       I = ideal(x^3 + x*y^2 + y^3);
       Q = R/I;
       S1 = subring {x^2, x*y};		   
       S2 = subring {x, y^2};	
       S = subringIntersection(S1, S2);
       gens S
       isFullIntersection S
       isSAGBI S
     Text
       To check whether the generators of the resulting @TO "IntersectedSubring"@ generate the intersection of the given subrings,
       use the function @TO "isFullIntersection"@. If the function @TO "isFullIntersection"@ returns @TT "true"@, then the generators of
       the @TO "IntersectedSubring"@ are guaranteed to be a subalgebra basis for the intersection.
       
       Note that, even if the function @TO "isFullIntersection"@ returns @TT "false"@, the generators of the given instance of 
       @TO "IntersectedSubring"@ may generate the full intersection. In general, the generators of an instance of @TO "IntersectedSubring"@
       are guaranteed to lie in each of the subrings that were intersected to produce it.
   SeeAlso
     Subring
     IntersectedSubring
     isFullIntersection
     originalSubringGens
     isSAGBI
///
doc ///
   Key
     IntersectedSubring
   Headline
     The type of all subrings arising from intersection
   Description
     Text
        @TT "IntersectedSubring"@ is a type of @TO "Subring"@ produced by intersecting two subrings using the function @TO "subringIntersection"@.
       Every instance of @TT "IntersectedSubring"@ has additional keys to those found in @ ofClass Subring@.
       The additional keys are as follows:
       
       @UL {
	    {BOLD {"originalSubrings"}, ": The list of two subrings used in the intersection."},
	    {BOLD {"compositeSubring"}, ": A Subring constructed during the intersection computation."}
	   }@
       
       The function @TO "subringIntersection"@ may be considered to be the constructor for @TT "IntersectedSubring"@.
       Each instance $S$ of @TT "IntersectedSubring"@ admits the usage of the function @TO "isFullIntersection"@ for checking whether
       the generators of $S$ are guaranteed to generate the intersection of the original subrings.
       
   SeeAlso
       Subring
       subringIntersection
       isFullIntersection
       originalSubringGens
///
doc ///
   Key
      isFullIntersection
     (isFullIntersection, IntersectedSubring)
   Headline
     check correctness of intersection computation
   Usage
     result = isFullIntersection(S)
   Inputs
     S:IntersectedSubring
   Outputs
     result:Boolean
       returns @TT "true"@ if the generators of $S$ are guaranteed to generate the intersection of the original subrings
   Description
     Text
       Checks if the algorithm for computing the intersection of two subrings in the function @TO "subringIntersection"@
       terminated resulting in a complete subalgebra basis. If the computation terminated in this way, then the generators
       of the given subring are guranteed to generate the intersection of the originally suppied subrings.
     Example
       R = QQ[x,y];
       I = ideal(x^3 + x*y^2 + y^3);
       Q = R/I;
       S1 = subring {x^2, x*y};		   
       S2 = subring {x, y^2};	
       S = subringIntersection(S1, S2);
       isFullIntersection S
     Text
       On the other hand, even if the function @TO "isFullIntersection"@ returns @ TT "false" @, the generators of the given subring
       may generate the intersection.
     Example
       R = QQ[x,y];
       S1 = subring {x^3, x^2*y};
       S2 = subring {x^4, y};
       S = subringIntersection(S1, S2, Limit => 15);
       gens S
       isFullIntersection S
   SeeAlso
     subringIntersection
     Subring
     IntersectedSubring
///
doc ///
   Key
      originalSubringGens
     (originalSubringGens, IntersectedSubring)
   Headline
     generators of the original subrings
   Usage
     result = originalSubringGens(S)
   Inputs
     S:IntersectedSubring
   Outputs
     result:List
       of the generators of the original subrings used in the creation of $S$
   Description
     Text
       Returns two single-row matrices of the generators of the original subrings whose intersection, via the function @TO "subringIntersection"@, is $S$.
     Example
       R = QQ[x,y];
       I = ideal(x^3 + x*y^2 + y^3);
       Q = R/I;
       S1 = subring {x^2, x*y};		   
       S2 = subring {x, y^2};	
       S = subringIntersection(S1, S2);
       originalSubringGens S
   SeeAlso
     subringIntersection
     Subring
     IntersectedSubring
///


-- ##############################
-- ## classes.m2 documentation ##
-- ##############################

doc ///
   Key
     Subring
   Headline
     The type of all subrings
   Description
     Text
       
        @TT "Subring"@ is a type that stores information associated to a subring of a polynomial ring, such as a set of subring generators and a reference to the polynomial ring it is contained in.
	An instance of a @TT "Subring"@ is constructed with the function @TO "subring"@.
       
       Every instance of @TT "Subring"@ is guaranteed to have the following keys:
       
       @UL {
	    {BOLD {"ambientRing"}, ": The polynomial or quotient ring that contains the subring instance's generators."},
	    {BOLD {"generators"}, ": A one-row matrix, the generators of the subring."},
	    {BOLD {"cache"}, ": Contains unspecified information. The contents of the cache may effect performance, but should never effect the result of a computation."},
	    {BOLD {"subductionQuotientRing"}, ": the polynomial ring with one variable for each generator of the subring"}
	   }@

   SeeAlso
       subring
       (gens, Subring)
       (ambient, Subring)
       (numgens, Subring)
       (net, Subring)
       (subductionQuotientRing, Subring)
       sagbi
       SAGBIBasis
///

doc ///
   Key
     subring
     (subring, List)
     (subring, Matrix)
     (subring, SAGBIBasis)
     [subring, GeneratorSymbol]
   Headline
     Constructs a subring of a polynomial ring.
   Usage
     A = subring M
     A = subring L
     A = subring S
   Inputs
     M:Matrix
       a one-row matrix whose entries are the generators for the constructed @TO "Subring"@.
     L:List
       a list of generators for the constructed @TO "Subring"@.
     S:SAGBIBasis
     GeneratorSymbol=>Symbol
       a symbol to be used for the variables of the subductionQuotientRing.
   Outputs
     A:Subring
   Description
     Text
       This function serves as the canonical constructor for the @TO "Subring"@ type.
     Example
       R = QQ[x];
       S = subring {x^4+x^3, x^2+x}
       SB = sagbi S;
       gens SB
       (x^3+x^2)%S

   SeeAlso
     Subring
     (gens, Subring)
     (ambient, Subring)
     (numgens, Subring)
     (net, Subring)
     sagbi
     SAGBIBasis
     
///


doc ///
   Key
     (gens, Subring)
   Headline
     A generating set of a subring
   Usage
     result = gens S
   Inputs
     S:Subring
   Outputs
     result:Matrix
   Description
     Text
       Returns a generating set for the @TO "Subring"@ as a one-row matrix.
     Example
       R = QQ[x,y,z];
       S = subring({x^2, y^2, z^2});
       gens S

   SeeAlso
     Subring
     subring
     (gens, Subring)
     (ambient, Subring)
     (numgens, Subring)
     (net, Subring)
///


doc ///
   Key
     (ambient, Subring)
   Headline
     The ambient ring of a subring
   Usage
     result = ambient S
   Inputs
     S:Subring
   Outputs
     result:Ring
   Description
     Text
       Returns the ambient ring of the generating set of the @TO "Subring"@. This may be a PolynomialRing or QuotientRing.
     Example
       R = QQ[x,y,z];
       S = subring({x^2, y^2, z^2});
       ambient S
       Q = R / ideal(x^3 - y);
       S' = subring({x^3, y^2});
       ambient S'

   SeeAlso
     Subring
     subring
     (gens, Subring)
     (ambient, Subring)
     (numgens, Subring)
     (net, Subring)
///


doc ///
   Key
     (numgens, Subring)
   Headline
     The number of generators of a subring
   Usage
     result = numgens S
   Inputs
     S:Subring
   Outputs
     result:ZZ
   Description
     Text
       Returns the number of generators of a @TO "Subring"@.
     Example
       R = QQ[x,y,z];
       S = subring({x^2, y^2, z^2, x^2+y^2});
       numgens S
   SeeAlso
     Subring
     subring
     (gens, Subring)
     (ambient, Subring)
     (numgens, Subring)
     (numgens, SAGBIBasis)
     (net, Subring)
///

doc ///
   Key
     (numgens, SAGBIBasis)
   Headline
     The number of generators of a SAGBIBasis
   Usage
     result = numgens SB
   Inputs
     SB:SAGBIBasis
   Outputs
     result:ZZ
   Description
     Text
       Returns the number of sagbi generators of @ ofClass SAGBIBasis @.
     Example
       R = QQ[x,y,z];
       S = subring({x^2, y^2, z^2, x^2+y^2});
       SB = sagbi S;
       numgens SB
   SeeAlso
     Subring
     subring
     SAGBIBasis
     sagbiBasis
     (gens, Subring)
     (ambient, Subring)
     (numgens, Subring)
     (net, Subring)
///


doc ///
   Key
     (net, Subring)
   Headline
     Short summary of a subring
   Usage
     net S
   Inputs
     S:Subring
   Description
     Text
        Displays the ambient ring and number of generators of a @TO "Subring"@.
   SeeAlso
     Subring
     subring
     (gens, Subring)
     (ambient, Subring)
     (numgens, Subring)
     (net, Subring)
///

doc ///
   Key
     GeneratorSymbol
   Headline
     variables for the subductionQuotientRing
   Description
     Text
       A symbol to be used for variables of the subductionQuotientRing
     Example
       R = QQ[x,y];
       S = subring({x^2, y^2, x*y}, GeneratorSymbol => f)
       (x+y)^4 // S
   SeeAlso
     Subring
     subring
     (gens, Subring)
     (ambient, Subring)
     (numgens, Subring)
     (net, Subring)
///
doc ///
   Key
     SAGBIBasis
   Headline
     The type of all sagbi bases
   Description
     Text
        This is a computation object for sagbi bases.
	It stores a partial sagbi computation for picking up a computation where it left off.
	To create @ ofClass SAGBIBasis @, use the function @TO "sagbiBasis"@.
	The @TT "SAGBIBasis" @ type is the main output type of the function @TO "sagbi"@.

        Every instance of @TT "SAGBIBasis"@ contains the following hashtables:
	
        @UL {
        {BOLD {"SAGBIdata"}, ": contains parameters for the sagbi computation"},
	    {"  degree: current degree of the S-pairs in the sagbi algorithm."},
	    {"  limit: degree limit of the computation."},
	    {"  sagbiGenerators: generators in the sagbi basis (default none)"},
	    {"  subalgebraGenerators: original generating set of the subring."},
        {BOLD {"SAGBIideals"}},
	    {"  I: the ideal defining the ambient ring = liftedRing / I"},
	    {"  leadTermsI: initial ideal of I"},
	    {"  reductionIdeal: SIdeal+I lifted to the tensorRing"},
	    {"  SIdeal: ideal generated by (SagbiGenerators - TagVariables)"},
        {BOLD {"SAGBIrings"}},
	    {"  liftedRing: the polynomial ring of the quotient ring"},
	    {"  quotientRing: ambient ring of the underlying subring"},
	    {"  tensorRing: tensor product of the liftedRing with a polynomial ring that has one variable for each sagbi generator"},
        {BOLD {"SAGBImaps"}, ": a collection of useful maps between the 'rings'"},
        {BOLD {"SAGBIoptions"}, ": supplied options for the sagbi computation"},
        {BOLD {"SAGBIpending"}, ": newly computed sagbi generators before they are added to the sagbiGenerators in 'data'"}
        }@
   SeeAlso
     sagbiBasis
     Subring
     sagbi
///



doc ///
   Key
     sagbiBasis
     (sagbiBasis,Subring)
     (sagbiBasis,HashTable)
     [sagbiBasis,AutoSubduce]
     [sagbiBasis,ReduceNewGenerators]
     [sagbiBasis,StorePending]
     [sagbiBasis,Strategy]
     [sagbiBasis,SubductionMethod]
     [sagbiBasis,Limit]
     [sagbiBasis,AutoSubduceOnPartialCompletion]
     [sagbiBasis,PrintLevel]
     [sagbiBasis,Recompute]
     [sagbiBasis,RenewOptions]
   Headline
     Constructs a computation object from a subring.
   Usage
     B = sagbiBasis S
   Inputs
     S:Subring
   Outputs
     B:SAGBIBasis
   Description
     Text
       This function serves as the canonical constructor for the @TO "SAGBIBasis"@ type.
       The @TT "SAGBIBasis"@ type is also the output of the function @TO "sagbi"@.
       A @TO "SAGBIBasis"@ may be cast to @ ofClass Subring @ using @TO "subring"@.
   SeeAlso
     SAGBIBasis
     (gens, SAGBIBasis)
     (ambient, SAGBIBasis)
     (ring, SAGBIBasis)
     (net, SAGBIBasis)
     (status, SAGBIBasis)
     sagbiDegree
     sagbiLimit
     sagbi
///

doc ///
   Key
     (gens,SAGBIBasis)
   Headline
     Returns a partial sagbi generating set
   Usage
     result = gens S
   Inputs
     S:SAGBIBasis
     CoefficientRing=>Boolean
       unused option
       
   Outputs
     result:Matrix
   Description
     Text
        Returns the current list of sagbiGenerators of the underlying @TO "Subring"@.
	If sagbi generators of @ ofClass SAGBIBasis @ is not a complete sagbi basis (for example it is obtained from a partial computation)
	then the generators obtained from this command may not be a generating set for the original subring.
     Example
        R = QQ[x,y];
	S = subring {x*y, x^2*y, x^3*y};
	gens S
	SB = sagbi(S, Limit => 3);
	gens SB
        isSAGBI S
	isSAGBI SB
     
   SeeAlso
     SAGBIBasis
     (gens, SAGBIBasis)
     (ambient, SAGBIBasis)
     (ring, SAGBIBasis)
     (net, SAGBIBasis)
     (status, SAGBIBasis)
     sagbiDegree
     sagbiLimit
     sagbi
///


doc ///
   Key
     (net, SAGBIBasis)
   Headline
     Short summary of a sagbi basis computation object
   Usage
     net S
   Inputs
     S:SAGBIBasis
   Description
     Text
        Displays the number of sagbi generators of @ ofClass SAGBIBasis @ along with the degree limit.
   SeeAlso
     SAGBIBasis
     (gens, SAGBIBasis)
     (ambient, SAGBIBasis)
     (ring, SAGBIBasis)
     (net, SAGBIBasis)
     (status, SAGBIBasis)
     sagbiDegree
     sagbiLimit
     sagbi
///

doc ///
   Key
     (ambient, SAGBIBasis)
   Headline
     The ambient ring of a SAGBIBasis computation object
   Usage
     result = ambient S
   Inputs
     S:SAGBIBasis
   Outputs
     result:Ring
   Description
     Text
       Returns the ambient ring of @ ofClass SAGBIBasis @. This may be a PolynomialRing or QuotientRing.
     Example
       R = QQ[x,y,z];
       S = sagbi {x^2, y^2, z^2}
       ambient S
       Q = R / ideal(x^3 - y);
       S' = sagbi {x^3, y^2}
       ambient S'

   SeeAlso
     SAGBIBasis
     (gens, SAGBIBasis)
     (ambient, SAGBIBasis)
     (ring, SAGBIBasis)
     (net, SAGBIBasis)
     (status, SAGBIBasis)
     sagbiDegree
     sagbiLimit
     sagbi
///

doc ///
   Key
     (ring, SAGBIBasis)
   Headline
     The lifted ring of a SAGBIBasis computation object
   Usage
     result = ring S
   Inputs
     S:SAGBIBasis
   Outputs
     result:Ring
   Description
     Text
       Returns the lifted ring of @ ofClass SAGBIBasis @. This is always a PolynomialRing.
     Example
       R = QQ[x,y,z];
       S = sagbi {x^2, y^2, z^2}
       ring S
       Q = R / ideal(x^3 - y);
       S' = sagbi {x^3, y^2}
       ring S'

   SeeAlso
     SAGBIBasis
     (gens, SAGBIBasis)
     (ambient, SAGBIBasis)
     (ring, SAGBIBasis)
     (net, SAGBIBasis)
     (status, SAGBIBasis)
     sagbiDegree
     sagbiLimit
     sagbi
///
doc ///
   Key
      sagbiDegree
     (sagbiDegree, SAGBIBasis)
   Headline
     The current degree of the sagbi computation
   Usage
     result = sagbiDegree SB
   Inputs
     SB:SAGBIBasis
   Outputs
     result:ZZ
   Description
     Text
       Returns the current degree of @ ofClass SAGBIBasis @. When the computation is resumed (without restarting)
       then the algorithm will pick up at this degree. Note that the degree may drop during the computation.
   SeeAlso
     SAGBIBasis
     (gens, SAGBIBasis)
     (ambient, SAGBIBasis)
     (ring, SAGBIBasis)
     (net, SAGBIBasis)
     (status, SAGBIBasis)
     sagbiLimit
     sagbi
///
doc ///
   Key
      sagbiLimit
     (sagbiLimit, SAGBIBasis)
   Headline
     The current limit of the sagbi computation
   Usage
     result = sagbiLimit SB
   Inputs
     SB:SAGBIBasis
   Outputs
     result:ZZ
   Description
     Text
       Returns the current limit of the sagbi computation. When the computation is resumed then
       this limit will be set to the new specified limit.
   SeeAlso
     SAGBIBasis
     (gens, SAGBIBasis)
     (ambient, SAGBIBasis)
     (ring, SAGBIBasis)
     (net, SAGBIBasis)
     (status, SAGBIBasis)
     sagbiDegree
     sagbi
     Limit
///
doc ///
   Key
      sagbiStatus
     (sagbiStatus, SAGBIBasis)
   Headline
     returns if the sagbi computation is done
   Usage
     result = sagbiStatus SB
   Inputs
     SB:SAGBIBasis
   Outputs
     result:Boolean
   Description
     Text
       Returns @ TT "true" @ if the sagbi computation is completed otherwise returns @ TT "false" @.
   SeeAlso
     SAGBIBasis
     (gens, SAGBIBasis)
     (ambient, SAGBIBasis)
     (ring, SAGBIBasis)
     (net, SAGBIBasis)
     (status, SAGBIBasis)
     sagbiDegree
     sagbiLimit
     sagbi
///
doc ///
   Key
     (status, SAGBIBasis)
   Headline
     status of the sagbi computation
   Usage
     result = status SB
   Inputs
     SB:SAGBIBasis
   Outputs
     result:String
   Description
     Text
       Returns a string with the status of sagbi computation.
   SeeAlso
     SAGBIBasis
     (gens, SAGBIBasis)
     (ambient, SAGBIBasis)
     (ring, SAGBIBasis)
     (net, SAGBIBasis)
     sagbiDegree
     sagbiLimit
     sagbi
///

doc ///
   Key
      forceSB
     (forceSB, SAGBIBasis)
     (forceSB, Subring)
     [forceSB, AutoSubduce]
     [forceSB, Strategy]
     [forceSB, SubductionMethod]
     [forceSB, Limit]
     [forceSB, RenewOptions]
     [forceSB, PrintLevel]
   Headline
     declare the generators of @ ofClass {Subring, SAGBIBasis} @ to be a complete sagbi basis
   Usage
     forceSB S
     forceSB SB
   Inputs
     S:Subring
     SB:SAGBIBasis
     AutoSubduce=>Boolean
       subduct the generators against themselves
   Description
     Text
       If forceSB is supplied @ ofClass SAGBIBasis @ $SB$, then the function performs
       autosubduction on the sagbiGenerators of $SB$. The sagbiDone flag is then
       set to @ TT "true" @ without checking whether the generators form a sagbi basis.
       
       If forceSB is supplied @ ofClass Subring @ $S$, then the function checks whether a
       @TO "SAGBIBasis"@ $SB$ has been created for $S$. If $SB$ exists, then @ TT "forceSB" @
       is applied to $SB$ as described above. Otherwise, $SB$ is created from $S$ and
       has its @ TT "sagbiDone" @ flag set to @ TT "true" @.
       
       Note, if the generators supplied to @ TT "forceSB" @ do not form a sagbi basis, then it
       may cause unexpected behaviour.
   SeeAlso
     Subring
     SAGBIBasis
///
doc ///
   Key
      subductionQuotientRing
     (subductionQuotientRing, Subring)
   Headline
     returns the subduction quotient ring of a subring
   Usage
     subQuotRing = subductionQuotientRing S
   Inputs
     S:Subring
   Outputs
     subQuotRing:PolynomialRing
   Description
     Text
       Given a subring S of a quotient ring Q is a polynomial ring with same coefficient ring as Q
       and has one variable for each generator of S. There is a natural map from the subduction quotient ring
       to S that sends each variable to its corresponding generator of S. Elements of the subduction quotient ring
       represent polynomial combinations of generators. Evaluating a combination of generators is equal to
       applying the aforementioned map.
       
       The subduction quotient ring naturally arises when using @TO (symbol //, RingElement, Subring)@, which takes
       an element of a subring and expresses it as a polynomial combination of its generators.
     Example
       R = ZZ/2[x,y];
       Q = R / ideal(x + y^5);
       S = subring {x+y, x*y, x*y^2};
       f = x^2*y^3 + x^4 + y^4;
       f % S
       g = f // S
       M = map(Q, subductionQuotientRing S, gens S);
       M g == f
       
   SeeAlso
     Subring
     (symbol //, RingElement, Subring)
///





-- #########################################
-- ## Short Explanation of Screws Example ##
-- #########################################
doc ///
    Key
        "Example: Translation and rotation sub-actions of the adjoint action of SE(3)"
    Description
        Text
	    The following example shows how to use this package to calculate the invariants of the translation sub-action of
	    the adjoint action of $SE(3)$, as considered in the preprint @HREF("https://arxiv.org/abs/2001.05417", "Polynomial invariants and SAGBI bases for multi-screws.")@
    	Example
	    gndR = QQ[(t_1..t_3)|(w_1..w_3)|(v_1..v_3), MonomialOrder => Lex];
	    translation := matrix {{w_1}, {w_2}, {w_3}, {t_1*w_2+t_2*w_3+v_1}, {-t_1*w_1+t_3*w_3+v_2}, {-t_2*w_1-t_3*w_2+v_3}};
	    sag := sagbi transpose translation;
	    netList first entries gens sag
        Text
    	    The above is precisely the 5 invariants Crook and Donelan give in equation (9), plus the additional 6th invariant.
	    
	    The generators computed below verify Theorem 2 of Crook and Donelan, describing rotational invariants in the case where m=3.
        Example
    		R = QQ[x_1..x_9, MonomialOrder => Lex];
    		eqns := {x_1^2+x_2^2+x_3^2-1, x_1*x_4+x_2*x_5+x_3*x_6, x_1*x_7+x_2*x_8+x_3*x_9, x_1*x_4+x_2*x_5+x_3*x_6,
		         x_4^2+x_5^2+x_6^2-1, x_4*x_7+x_5*x_8+x_6*x_9, x_1*x_7+x_2*x_8+x_3*x_9, x_4*x_7+x_5*x_8+x_6*x_9,
      			 x_7^2+x_8^2+x_9^2-1, x_1*x_5*x_9-x_1*x_6*x_8-x_2*x_4*x_9+x_2*x_6*x_7+x_3*x_4*x_8-x_3*x_5*x_7-1};
    		sag1 = subring sagbi eqns;
		SB = sagbi(sag1, Limit => 100);
		isSAGBI SB
		netList first entries gens SB
///

end --

